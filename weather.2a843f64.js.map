{"mappings":"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","sources":["src/weather.js"],"sourcesContent":["// async function getCountry() {\n//   const URL = 'https://restcountries.com/v3.1/name/';\n//   const resp = await fetch(`${URL}Ukraine`);\n//   if (!resp.ok) {\n//     throw new Error(resp.statusText);\n//   }\n//   return resp.json();\n// }\n\n// getCountry()\n//   .then(data => console.log(data))\n//   .catch(e => console.log(e));\n\n// async function getCapital() {\n//   //   try {\n//   const URL = 'https://restcountries.com/v3.1/name/';\n//   const arr = ['Ukraine', 'Germany', 'France', 'hhhhh'];\n\n//   const resps = arr.map(async ctry => {\n//     const resp = await fetch(`${URL}${ctry}`);\n//     if (!resp.ok) {\n//       throw new Error(resp.statusText);\n//     }\n\n//     return resp.json();\n//   });\n\n//   const prom = await Promise.allSettled(resps);\n//   console.log(prom);\n//   return prom;\n//   //   } catch (e) {\n//   //     console.log(e);\n//   //   }\n// }\n\n// getCapital()\n//   .then(data => {\n//     const res = data\n//       .filter(({ status }) => status === 'fulfilled')\n//       .map(({ value }) => value[0]);\n//     const rej = data.filter(({ status }) => status === 'rejected');\n//     console.log(res);\n//     console.log(rej);\n//   })\n//   .catch(e => console.log(e));\n\nconst searchForm = document.querySelector('.js-search');\nconst addCountry = document.querySelector('.js-add');\nconst list = document.querySelector('.js-list');\nconst formContainer = document.querySelector('.js-form-container');\nconst markup = ' <input type=\"text\" name=\"country\" />';\n\naddCountry.addEventListener('click', handleAddInput);\n\nfunction handleAddInput() {\n  const markup = ' <input type=\"text\" name=\"country\" />';\n  formContainer.insertAdjacentHTML('beforeend', markup);\n}\n\nsearchForm.addEventListener('submit', handleForm);\n\nfunction handleForm(e) {\n  e.preventDefault();\n  const data = new FormData(e.currentTarget);\n  const arr = data\n    .getAll('country')\n    .filter(item => item)\n    .map(item => item.trim());\n\n  getCountries(arr)\n    .then(async resp => {\n      const capitals = resp.map(({ capital }) => capital[0]);\n      const weatherService = await getWeather(capitals);\n      list.innerHTML = createMarkup(weatherService);\n    })\n    .catch(e => console.log(e))\n    .finally(() => {\n      searchForm.reset();\n      formContainer.innerHTML = markup;\n    });\n}\n\nasync function getCountries(arr) {\n  const resps = arr.map(async item => {\n    const resp = await fetch(`https://restcountries.com/v3.1/name/${item}`);\n\n    if (!resp.ok) {\n      throw new Error(resp.statusText);\n    }\n    return resp.json();\n  });\n\n  const data = await Promise.allSettled(resps);\n  const countryObj = data\n    .filter(({ status }) => status === 'fulfilled')\n    .map(({ value }) => value[0]);\n\n  return countryObj;\n}\n\nasync function getWeather(arr) {\n  const BASE_URL = 'http://api.weatherapi.com/v1';\n  const API_KEY = 'a513b9e402f74148a7430930241802';\n\n  const resps = arr.map(async city => {\n    const params = new URLSearchParams({\n      key: API_KEY,\n      q: city,\n    });\n\n    const resp = await fetch(`${BASE_URL}/current.json?${params}`);\n    if (!resp.ok) {\n      throw new Error(resp.statusText);\n    }\n\n    return resp.json();\n  });\n\n  const data = await Promise.allSettled(resps);\n  const obj = data\n    .filter(({ status }) => status === 'fulfilled')\n    .map(({ value }) => value);\n\n  return obj;\n}\n\nfunction createMarkup(arr) {\n  return arr\n    .map(\n      ({\n        current: {\n          temp_c,\n          condition: { icon, text },\n        },\n        location: { country, name },\n      }) =>\n        `      <div>\n        <h2>${country}</h2>\n        <h3>${name}</h3>\n        <img src=\"${icon}\" alt=\"${text}\" />\n        <p>${text}</p>\n        <p>${temp_c}</p>\n      </div>`\n    )\n    .join('');\n}\n"],"names":["$bpxeT","parcelRequire","$05d986efba626b9b$var$searchForm","document","querySelector","$05d986efba626b9b$var$addCountry","$05d986efba626b9b$var$list","$05d986efba626b9b$var$formContainer","$05d986efba626b9b$var$_getCountries","$parcel$interopDefault","$2TvXO","mark","_callee1","arr","resps","data","countryObj","map","_callee","item","resp","fetch","concat","_ctx","sent","ok","Error","statusText","json","Promise","allSettled","_ctx1","filter","param","status","value","apply","this","arguments","$05d986efba626b9b$var$getWeather","$05d986efba626b9b$var$_getWeather","_callee2","obj","city","params","URLSearchParams","key","q","_ctx2","$05d986efba626b9b$var$createMarkup","current","temp_c","_current","_condition","condition","icon","text","_location","location","country","name","join","addEventListener","insertAdjacentHTML","e1","preventDefault","$05d986efba626b9b$var$getCountries","FormData","currentTarget","getAll","trim","then","capitals","weatherService","capital","innerHTML","catch","e","console","log","finally","reset"],"version":3,"file":"weather.2a843f64.js.map"}